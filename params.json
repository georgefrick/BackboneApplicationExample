{"name":"Backbone Routed Tabs Example","tagline":"Using JQuery and Backbone as a simple application framework","body":"### Single page application management.\r\nThis application is a full example of using Backbone.js and JQuery to do simple management of larger single page web applications. \r\n\r\nThe application works by using Backbone router route urls as commands. Using Backbones router to manage the addition and removal of tabs allows for tabs to exist as separate modules. Each module can be developed independently; giving the application a real 'windowed' feel on a single page.\r\n\r\nThe application is focusing on kick starting applications and helping users learn backbone. From there you can use it as an application skeleton; or just an example to refer back to. \r\n\r\n### Features:\r\n1. Support for singleton tabs, reopening selects the previously opened tab.\r\n2. Support for multiple tabs; uniquely identified.\r\n3. You can easily add tab history, re-open, etc. (Not included)\r\n4. Scope is managed; parts of the application can be built individually and scope to their portion of the page.\r\n\r\n### How It Works\r\n\r\n**Singleton Tab**\r\n```\r\n  // If the tab doesn't exist or was destroyed, create.\r\nif (!this.openBookShelf\r\n     || ($(\"#\" + this.openBookShelf).length == 0)) {\r\n  // Create a unique ID this for tab.\r\n  var tabId = \"book-shelf\" + Math.guid();\r\n  var tabName = \"Book Shelf\";\r\n  // Create an instance of your module.\r\n  var shelf = new BookDatabase.Shelf();\r\n  this.openBookShelf = this.addTab({\r\n    'id' : tabId,\r\n    'name' : tabName\r\n  });\r\n  // Content has a unique container.\r\n  var tabContent = $(\"#\" + this.openBookShelf);\r\n  tabContent.empty();\r\n  tabContent.append(shelf.render().el);\r\n} else if (this.openBookShelf) {\r\n  // Tab exists, so select it.\r\n  this.selectTabById(this.openBookShelf);\r\n}\r\n```\r\n\r\n**Multiple Tabs**\r\n```\r\n// Create unique tab id.\r\nvar tabId = \"calculator-\" + Math.guid();\r\nvar tabName = \"Calculator\";\r\n// Create an instance of your module.\r\nvar calc = new Calculator.CalculatorView();\r\nvar uniqueId = this.addTab({\r\n  'id' : tabId,\r\n  'name' : tabName\r\n});\r\n// Content has a unique container.\r\nvar tabContent = $(\"#\" + uniqueId);\r\ntabContent.empty();\r\ntabContent.append(calc.render().el);\r\n```\r\n\r\n### Support or Contact\r\nYou can contact the author (@georgefrick) through GitHub or via email at george.frick@gmail.com.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}